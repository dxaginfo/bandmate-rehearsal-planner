generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  password           String
  firstName          String
  lastName           String
  phone              String?
  timezone           String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  bandMembers        BandMember[]
  availability       Availability[]
  specialAvailability SpecialAvailability[]
  createdVenues      Venue[]              @relation("VenueCreator")
  createdBands       Band[]               @relation("BandCreator")
  createdRehearsals  Rehearsal[]          @relation("RehearsalCreator")
  attendance         Attendance[]
  ownedEquipment     Equipment[]          @relation("EquipmentOwner")
  notifications      Notification[]
}

model Band {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creator     User         @relation("BandCreator", fields: [createdBy], references: [id])
  members     BandMember[]
  rehearsals  Rehearsal[]
}

model BandMember {
  id        String   @id @default(uuid())
  bandId    String
  userId    String
  role      String   // leader, member, admin
  instrument String?
  joinDate  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  band      Band     @relation(fields: [bandId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bandId, userId])
}

model Availability {
  id             String   @id @default(uuid())
  userId         String
  dayOfWeek      Int      // 0-6 (Sunday-Saturday)
  startTime      String   // HH:MM format
  endTime        String   // HH:MM format
  recurrenceType String   // weekly, bi-weekly, monthly
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SpecialAvailability {
  id          String   @id @default(uuid())
  userId      String
  date        DateTime
  isAvailable Boolean
  startTime   String?  // HH:MM format
  endTime     String?  // HH:MM format
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Venue {
  id          String      @id @default(uuid())
  name        String
  address     String?
  contactInfo String?
  notes       String?
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  creator     User        @relation("VenueCreator", fields: [createdBy], references: [id])
  rehearsals  Rehearsal[]
}

model Rehearsal {
  id               String              @id @default(uuid())
  bandId           String
  venueId          String?
  title            String
  description      String?
  startTime        DateTime
  endTime          DateTime
  isRecurring      Boolean             @default(false)
  recurrencePattern String?
  createdBy        String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  band             Band                @relation(fields: [bandId], references: [id], onDelete: Cascade)
  venue            Venue?              @relation(fields: [venueId], references: [id])
  creator          User                @relation("RehearsalCreator", fields: [createdBy], references: [id])
  attendance       Attendance[]
  rehearsalEquipment RehearsalEquipment[]
}

model Attendance {
  id          String    @id @default(uuid())
  rehearsalId String
  userId      String
  status      String    // confirmed, declined, tentative
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rehearsal   Rehearsal @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([rehearsalId, userId])
}

model Equipment {
  id                 String               @id @default(uuid())
  name               String
  description        String?
  ownerId            String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  owner              User                 @relation("EquipmentOwner", fields: [ownerId], references: [id])
  rehearsalEquipment RehearsalEquipment[]
}

model RehearsalEquipment {
  id          String    @id @default(uuid())
  rehearsalId String
  equipmentId String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rehearsal   Rehearsal @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@unique([rehearsalId, equipmentId])
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  relatedId   String?  // ID of related entity (e.g., rehearsal, band)
  relatedType String?  // Type of related entity (e.g., rehearsal, band)
  type        String   // notification type
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}